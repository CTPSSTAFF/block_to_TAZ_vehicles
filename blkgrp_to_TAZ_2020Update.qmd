---
title: "Merging Blocks and TAZs"
author: "Sophie Fox and Steven Andrews"
date: "`r Sys.Date()`"
format: 
  html: 
    self-contained: true
editor: visual
---

## General Goal

The TDM outputs results at a TAZ level. However, for equity analyses, we need to allocated census demographics to those TAZs--the model does not output results based on minority status, income status, or any other status that might be interesting for an equity analysis.

Census geometry does NOT fit neatly into TAZ geometry. We would like to allocate pieces of census demographics to surrounding TAZs to create demographics of the TAZs. We need to create a table that we can use to allocate portions of census geometry into TAZs.

**Problems:**

-   TAZs are mostly made up of census blocks, but they're not exactly made up of blocks.
-   There are small tweaks to the TAZ geometry throughout the model region that mean lines do not overlap exactly.
-   Census blocks are NOT necessarily the best starting point because the differential privacy features of the 2020 census have rendered them unreliable.
-   TAZs may be smaller than a census geometry.

**Constraints:**

-   TAZ geometry may change over time. The process should be repeatable for arbitrary TAZ geometry (this essentially means for ANY geometry).

-   We want the process to be maintainable over multiple ACS iterations.

**Other Goals**

-   Create multiple methods to compare the sensitivity to methodology.

**Potential Solutions**

When joining 2010 census blocks to TAZs, Paul Reim performed a series of intersections to identify where blocks were split. Where a TAZ split a block, he counted rooftops and used StreetView to estimate how many rooftops were in each TAZ. It is not desirable to maintain such a process--the reproducibility is limited and its highly manual. We can replicate the methodology using the rooftops layer. There are other solutions available as well:

1.  Rooftops
    i.  Allocate based on where the largest piece of the rooftop is (chosen)
    ii. Where the centroid of the roof is
    iii. Allocate proportionally based on the rooftop area.
2.  Land Area
3.  Total Area
4.  Dasymetric Mapping (not completed yet)

### Useful references

-   massgis census: <https://www.mass.gov/info-details/massgis-data-2020-us-census>

-   MassDOT rooftops: <https://www.mass.gov/info-details/massgis-data-building-structures-2-d>

-   Microsoft Rooftops: <https://github.com/Microsoft/USBuildingFootprints>

-   Dasymetric Mapping: <https://www.nature.com/articles/s41597-022-01603-z>

## Set up Packages

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(tidycensus)
library(tigris)
library(mapview)
library(sf)
library(units)
library(rgeos)
```

## Load Census, TAZ, and Rooftop Shapes

```{r}
#| results: hide
 
#Load TAZ shapes
TAZ <- sf::read_sf("J:/Shared drives/Data_Requests/TAZ_Shapefiles/R_Script/out/geopackage/TAZ19.gpkg") %>% 
  st_transform(26986) %>% 
  filter(STATE == "MA") # Filtering to only in MA

TAZ$TAZ_area <- st_area(TAZ)
  #filter(ID == 4398) # Filtering for one example

# OBtain the 2020 block_groups from the tigris package.
# The CB false (the more detailed) geometry looked like it matched up better, so we move forward with that path.
block_groups <- tigris::block_groups(state = "MA", 
                                cb = FALSE, 
                                year = 2020) %>% 
  st_transform(26986)

# Clip the block_groups to match the geometry of the TAZ file. This will eliminate coastal waters but retain inland waters. This is a useful starting place to have a similar coast line. This will also make our `erase_water` function work on a more similar set of water.

block_groups_nocoast <- 
  st_intersection(block_groups, TAZ |> summarize()) |> 
  st_collection_extract("POLYGON")

# Review the differences. It looks like what we'd expect. Coastal waters are not in the dataset anymore. 
# mapview(block_groups) + 
# mapview(block_groups_nocoast , col.regions = "orange")

# Overwrite the original file with the no_coast version and clean up the workspace.
block_groups <- block_groups_nocoast
rm(block_groups_nocoast)

block_groups <- block_groups |> 
  group_by(GEOID, ALAND, AWATER) |> 
  summarize()

#massgis rooftops: https://www.mass.gov/info-details/massgis-data-building-structures-2-d
# Download the file into "./data/base/" and then read it in here. Save it as a .rds for easy loading. Optionally, we could 
# rooftops <- st_read("data/base/STRUCTURES_POLY.shp")
# 
# saveRDS(rooftops, "data/processed/rooftops.rds")
```

### Filter For MPO Region

We would like to grab the TAZs in the MPO and CBG that touch or may contribute area to those TAZs. We slightly buffer the TAZs to capture CBGs that might share a roof in a TAZ but may not be captured in a simple `st_contains` join--though `st_within` could work.

```{r}

# MPO region TAZ
TAZ_MPO <- TAZ %>% 
  filter(RPA == "MAPC")

# MPO region + buffer
TAZ_buffer <- TAZ_MPO %>% 
  st_union() %>% 
  st_buffer(dist = 1000)

# Pull all the TAZs within a 100m buffer of MPO TAZs.
# MPO region + buffer TAZ
TAZ_MPO_buffer <- TAZ[TAZ_buffer,]

# MPO region BG. These are all the block groups touching the MPOs in the TAZ.
blk_group_MPO <- block_groups[TAZ_MPO,]

# MPO region + buffer BG
blk_group_MPO_buffer <- block_groups[TAZ_buffer,]

# Display for exploration of results. Red CBGs are those that 
# are added due to the slight buffer.
# mapview(blk_group_MPO) +
#   # mapview(blk_group_MPO_buffer, col.regions = "red") +
#   mapview(TAZ_MPO, alpha.regions = 0.01, lwd = 3) +
#   mapview(TAZ_MPO_buffer, alpha.regions = 0.01, lwd = 3) +
#   mapview(TAZ_buffer, alpha.regions = 0.01, lwd = 3, col.regions = "pink") +
#   mapview(blk_group_MPO_buffer |> filter(GEOID == "250056002032"), col.region = "gold")
```

## Calculate Intersecting Areas

### Find Area of Census Block Groups

We find the area of the census block groups. This area will not necessarily match areas reported by the census because of how the coastline is handled and how inland water is handled.

```{r}
blk_group_MPO_buffer$BG_TOTAL_AREA <- (st_area(blk_group_MPO_buffer) ) 
```

### Intersect Census Block Groups with TAZ

```{r}
intersections <- st_intersection(TAZ_MPO_buffer, blk_group_MPO_buffer) %>%
  st_collection_extract("POLYGON") %>% 
  rowid_to_column("Intersection_ID") # unique ID for each intersection geometry

intersections$INTERSECTION_TOTAL_AREA <- st_area(intersections)

saveRDS(intersections, "./data/processed/intersect.rds")
#intersections <- read_rds("./data/processed/intersect.rds")
```

We now have the full area of the CBGs and the area of the intersections.

### Erase Water From Intersections

We can now remove the water from the intersections. By doing this now, we only remove the water area once. We set the limit at the top 50% of water areas.

```{r}
water <-
  area_water(
    state = "MA",
    year = 2020,
    county = fips_codes |> filter(state == "MA") |> select(county_code) |> pull()
  ) |> st_drop_geometry()

# Sort our water find the share of the area and the percentile of each body of water.
water <- water |> 
  arrange(desc(AWATER)) |> 
  mutate(share_of_area = cumsum(AWATER)/sum(AWATER),
         ntile = row_number()/n())

ggplot(water, aes(x= ntile, y = share_of_area)) + 
  geom_point() +
  scale_x_continuous(labels = scales::percent_format()) +
  scale_y_continuous(labels = scales::percent_format())
```

```{r}
intersections_land <- tigris::erase_water(intersections, 
                                area_threshold = 0.50, 
                                year = 2020)

saveRDS(intersections_land, "./data/processed/intersections_land.rds")
#intersections_land <- read_rds("./data/processed/intersections_land.rds")

```

### Recalculate Land Area for the Intersections

We can now recalculate the area to obtain the land area by intersection.

```{r}
intersections_land$INTERSECTION_LAND_AREA <- st_area(intersections_land)
```

### Find Total Land Area for Census Block Groups

```{r}
intersections_land <- intersections_land %>% 
  group_by(GEOID) %>% #grouping by block group
  mutate(BG_LAND_AREA = sum(INTERSECTION_LAND_AREA))
```

For each intersection area we now have the full area, the land area, the full area of the CBG and the land area of the CBG.

### Rejoin to initial intersection dataset

Bring the full dataset back together. We need to join back to the original intersection to maintain all of the "full area". Some of the areas disappear after water is removed. Without these the areas are not fully accounted for.

```{r}
intersections_for_alloc <- intersections |>
  st_drop_geometry() |>
  select(Intersection_ID, ID, GEOID, 
         INTERSECTION_TOTAL_AREA, BG_TOTAL_AREA) |>
  left_join(
    intersections_land |> 
      st_drop_geometry() |> 
      select(Intersection_ID, ID, GEOID, 
             INTERSECTION_LAND_AREA, BG_LAND_AREA),
    by = c("Intersection_ID", "ID", "GEOID")) 
```

## Allocate CBGs to TAZs

### Allocate based on Area

This calculated the relationship between CBGs and TAZs based on land area (LA) and full area (FA). The full area method does have coastal waters stripped away.

```{r}
area_allocation <- intersections_for_alloc |> 
  group_by(GEOID) |> 
    mutate(BG_LA_pct = 
             drop_units(INTERSECTION_LAND_AREA / BG_LAND_AREA),
           BG_FA_pct = 
             drop_units(INTERSECTION_TOTAL_AREA / BG_TOTAL_AREA) 
             # FA = Full Area.
           ) |> 
  select(Intersection_ID, ID, GEOID, 
         BG_LA_pct, BG_FA_pct)

area_allocation <- area_allocation |> 
  group_by(GEOID, ID) |> 
  summarize(BG_LA_pct = sum(BG_LA_pct, na.rm = TRUE),
            BG_FA_pct = sum(BG_FA_pct, na.rm = TRUE)) |> 
  filter(ID %in% TAZ_MPO$ID)

write_csv(area_allocation, "./output/data/area_allocation_BosMPO.csv")
```

#### Check Results

We want to verify that we have maintained area. We want 100% of the area accounted for. This may be not as true now that we've included extra buffer area. We may want 100% of the area included for the TAZs inside the MPO boundary.

```{r}
flag <- area_allocation |> 
  group_by(GEOID) |> 
  summarize(tot_LA_in_CBG = sum(BG_LA_pct, na.rm = TRUE),
            tot_FA_in_CBG = sum(BG_FA_pct, na.rm = TRUE)) |>
  ungroup() |> 
  filter(tot_FA_in_CBG < 0.999 | tot_LA_in_CBG < 0.999)
```

There are two land_area values that are equal to `0`, rather than `1`. These are: 250099901000 and 250259901010. Neither of these have any land area at all--they are water-only CBGs. At a glance, the remaining appear to be associated with the border or otherwise excluding some piece of geometry outside the MPO.

##### Explore Areas

```{r}
example <- intersections %>% 
  filter(GEOID %in% flag$GEOID)
  # filter(GEOID == "250277612002")

mapview(TAZ_MPO_buffer |> 
          filter(ID %in% example$ID), 
        col.regions = "red", 
        layer.name = "TAZ") + 
  mapview(blk_group_MPO_buffer |> 
            filter(GEOID %in% example$GEOID),
          alpha.regions = 0.01, lwd = 3,
          layer.name = "CBG") + 
  mapview(example, zcol = "Intersection_ID",
          layer.name = "Intersection") + 
  mapview(TAZ_MPO |> st_union())
```

### Allocate based on rooftops

We want to find the intersection of rooftops and the CBGs and TAZs.

We pull the pre-stored rooftops file in and show an example. The file generally matches the footprints in the OSM layer and the aerial satellite layer.

```{r}
# rooftops.rds reated previously.
rooftops <- read_rds("./data/processed/rooftops.rds")
mapview(rooftops |> filter(STRUCT_ID == "53226_895084"))
```

We can make our work faster by pre-filtering the list of roofs in the Boston MPO. By using the buffer we should be able to include all the roofs of concern.

```{r}
full_buffer <- st_union(blk_group_MPO_buffer, 
                        TAZ_buffer) |> 
  summarize()

rooftops <- st_filter(rooftops, full_buffer)
saveRDS(rooftops, "./data/processed/rooftops_MPO.rds")
# rooftops <- readRDS("./data/processed/rooftops_MPO.rds")
```

#### Cleaning duplicate and NA rooftop IDs.

```{r}

# Find the IDs of dupes/repeats and how many times they are repeated
repeats <- rooftops |> 
  st_drop_geometry() |> 
  group_by(STRUCT_ID) |> 
  tally() |> 
  filter(n>1)
# View(repeats)

# Find the rooftops with unique STRUCT_IDs. These roofs do not need to be filtered.
unique_roof <- rooftops %>% filter(!(STRUCT_ID %in% repeats$STRUCT_ID)) %>% 
  select(STRUCT_ID, geometry)

# Find the rooftops with repeated or NA STRUCT_IDs. These roofs need to be cleaned.
repeat_roof <- rooftops %>% 
  filter(STRUCT_ID %in% repeats$STRUCT_ID) %>% 
  select(STRUCT_ID, geometry)

## Clean NAs
# All NAs will be replaced by a new id
repeat_roof <- repeat_roof |>
  mutate(STRUCT_ID = coalesce(STRUCT_ID, paste0(row_number(), "_replaced_na")))

# Roofs with duplicate ids will be merged into a single roof.
repeat_roof <- repeat_roof %>% 
  group_by(STRUCT_ID) %>% 
  summarize() 

#mapview(repeat_roof)

# combining the rooftops with unique ids with new clean roofs
rooftops_clean <- bind_rows(unique_roof, repeat_roof)

rm(rooftops, unique_roof, repeat_roof)

# Some of the repeats are where there are buildings for schools, like UMass Boston
# Others are where there are multiple polygons that have the same struct ID and just look like a main building with an extra attachment.  

# Option 1: summarize repeats and add back into no duplicates
# Option 2: Go through manually and take the largest

#NA_rooftops <- rooftops %>% 
#  filter(is.na(STRUCT_ID) == TRUE)
#x <- head(NA_rooftops,1)
#mapview(x)
# NA struct IDs seem to be random
```

#### Find which CBG and which TAZ each rooftop is most in.

1.  Intersect with CBGs
2.  Intersect with TAZs.

```{r}
tictoc::tic()
roof_cbg <- st_join(
  rooftops_clean,
  blk_group_MPO_buffer |> select(GEOID),
  left = FALSE,
  largest = TRUE
) |> st_drop_geometry()
tictoc::toc()

tictoc::tic()
roof_taz <- st_join(
  rooftops_clean,
  TAZ_MPO_buffer |> select(ID, RPA),
  left = FALSE,
  largest = TRUE
)|> st_drop_geometry()
tictoc::toc()

# get rid of rooftops that are mostly not in the MPO taz or bgs
roof_cbg_MPO <- roof_cbg %>% 
  filter(GEOID %in% blk_group_MPO$GEOID)

roof_taz_MPO <- roof_taz %>% 
  filter(RPA == "MAPC")

# Make a single table where each rooftop is assigned to the CBG its most in and the TAZ its most in.
roof_shares_MPO <- rooftops_clean |> 
  st_drop_geometry() |> 
  filter(STRUCT_ID %in% roof_cbg$STRUCT_ID) |> 
  left_join(roof_cbg_MPO, by = "STRUCT_ID") |> 
  left_join(roof_taz_MPO, by = "STRUCT_ID")

saveRDS(roof_cbg, "./data/processed/roof_cbg.rds")
saveRDS(roof_taz, "./data/processed/roof_taz.rds")
saveRDS(roof_cbg_MPO, "./data/processed/roof_cbg_MPO.rds")
saveRDS(roof_taz_MPO, "./data/processed/roof_taz_MPO.rds")
saveRDS(roof_shares_MPO, "./data/processed/roof_shares_MPO.rds")

#roof_cbg <- readRDS("./data/processed/roof_cbg.rds")
#roof_taz <- readRDS("./data/processed/roof_taz.rds")
#roof_shares <- readRDS("./data/processed/roof_shares.rds")

tictoc::tic()
roof_shares_ratio <- roof_shares_MPO |> 
  st_drop_geometry() |> 
  group_by(GEOID,ID) |> 
  summarize(tot_roofs = n()) |> 
  group_by(GEOID) |> 
  mutate(BG_RT_pct = tot_roofs/sum(tot_roofs))
tictoc::toc()

write_csv(roof_shares_ratio, file = "./output/data/rooftop_allocation_MPO_largest_in_each.csv")

```

## Dasymetric Allocation

```{r}

```

## Join the Roofs, Land Area, All Area Methods

```{r}
# Join the area and roof-based methods here.
area <- read_csv("./output/data/area_allocation_BosMPO.csv")
roof <- read_csv("./output/data/rooftop_allocation_MPO_largest_in_each.csv") |> select(-tot_roofs)

# Put each of the three methodologies together into a single table. # We can use this table as the basis for our comparisons and tests.
allocation_results <- full_join(area, roof, by = c("GEOID", "ID")) |> 
  filter(ID %in% TAZ_MPO$ID)

# Import the census block group info for MA. 

# P2_005N: Non-Hispanic/Latino, White-alone.
# P1_001N: Total Population.
minority_tidy <- tidycensus::get_decennial(
  geography = "block group",
  state = "MA",
  variable = "P2_005N",
  summary_var = "P1_001N",
  year = 2020) |> 
  select(GEOID, min_pop = value, tot_pop = summary_value) |> 
  mutate(GEOID = as.numeric(GEOID))

# Join the population to the CBGs.
TAZ_results <- allocation_results |> 
  left_join(minority_tidy, by = "GEOID") %>% 
  mutate(BG_LA_min = BG_LA_pct * min_pop, 
         BG_FA_min = BG_FA_pct* min_pop, 
         BG_RT_min = BG_RT_pct * min_pop) %>% 
  mutate(BG_LA_tot = BG_LA_pct * tot_pop, 
         BG_FA_tot = BG_FA_pct* tot_pop, 
         BG_RT_tot = BG_RT_pct * tot_pop) %>% 
  group_by(ID) %>% 
  summarize(LA_min = sum(BG_LA_min, na.rm=TRUE),
            FA_min = sum(BG_FA_min, na.rm=TRUE),
            RT_min = sum(BG_RT_min, na.rm=TRUE),
            LA_tot = sum(BG_LA_tot, na.rm=TRUE),
            FA_tot = sum(BG_FA_tot, na.rm=TRUE),
            RT_tot = sum(BG_RT_tot, na.rm=TRUE))
  
```

### Testing

Check that we have retained all of our GEOID area. These values should add up to 100% or 1.0. The areas that do not are very small and may be solved when the script is scaled to include a larger area instead of a single county.

```{r}

flags <- allocation_results |> 
  filter(ID %in% TAZ_MPO$ID) |>
  group_by(GEOID) |> 
  summarize(tot_LA_in_CBG = sum(BG_LA_pct, na.rm = TRUE),
            tot_FA_in_CBG = sum(BG_FA_pct, na.rm = TRUE),
            tot_RT_in_CBG = sum(BG_RT_pct, na.rm = TRUE)
            ) |>
  ungroup() |> 
  filter(tot_FA_in_CBG < 0.999 | 
           tot_LA_in_CBG < 0.999 |
           tot_RT_in_CBG < 0.999)

mapview(blk_group_MPO_buffer |> filter(GEOID %in% flags$GEOID)) +
  mapview(TAZ_MPO |> st_union(), col.regions = "green") +
  mapview(TAZ_MPO_buffer, col.regions = "red")

```

### Compare Population Estimates

```{r}
#| warning: false
#| message: false
library(GGally)

min_results <- TAZ_results %>% 
  select(LA_min, FA_min, RT_min)

tot_results <- TAZ_results %>% 
  select(LA_tot, FA_tot, RT_tot)

percentages <- TAZ_results %>% 
  mutate(LA_pct_min = 100 * LA_min / LA_tot,
         FA_pct_min = 100 * FA_min / FA_tot,
         RT_pct_min = 100 * RT_min / RT_tot) %>% 
  select(LA_pct_min, FA_pct_min, RT_pct_min )

ggpairs(min_results, title="Correlogram For Minority Pop") 
ggpairs(tot_results, title="Correlogram For Total Pop")
ggpairs(percentages, title="Correlogram For Percent Minority")

```

## Map Comparison

## Trailing Thoughts

### Thoughts:

Some TAZs are smaller than census block groups. Do we need to adjust the method of analysis for those cases? It could be the same. Since we are looking for the percentage of the block group that is within the TAZ, then it wouldn't matter if it is smaller or larger. In this case, it just wouldn't also be sharing area with other block groups.

![](images/image-779890944.png)

### Extensions

We still can explore the dasymetric method of assigning population to blocks. This method allocates people among areas that are livable--reasonable slopes, not roads.

We can also switch to a new rooftop data source that contains rooftops for NH, RI, and MA: [Microsoft: USBuildingFootprints](https://github.com/Microsoft/USBuildingFootprints).

Maps

Quick presentation

Lean on graphics

Questions:

Preferences?

Next steps:\
Dasymetric

Tracts vs bg

if we want to go more, need to switch rooftop datasets
