---
title: "Merging Census Tracts and TAZs"
author: "Sophie Fox and Steven Andrews"
date: "`r Sys.Date()`"
format: 
  html: 
    self-contained: true
editor: visual
---

## General Goal

The TDM outputs results at a TAZ level. However, for equity analyses, we need to allocated census demographics to those TAZs--the model does not output results based on minority status, income status, or any other status that might be interesting for an equity analysis.

Census geometry does NOT fit neatly into TAZ geometry. We would like to allocate pieces of census demographics to surrounding TAZs to create demographics of the TAZs. We need to create a table that we can use to allocate portions of census geometry into TAZs.

**Problems:**

-   TAZs are mostly made up of census tracts, but they're not exactly made up of tracts.
-   There are small tweaks to the TAZ geometry throughout the model region that mean lines do not overlap exactly.
-   Census blocks are NOT necessarily the best starting point because the differential privacy features of the 2020 census have rendered them unreliable.
-   TAZs may be smaller than a census geometry.

**Constraints:**

-   TAZ geometry may change over time. The process should be repeatable for arbitrary TAZ geometry (this essentially means for ANY geometry).

-   We want the process to be maintainable over multiple ACS iterations.

**Potential Solutions**

When joining 2010 census blocks to TAZs, Paul Reim performed a series of intersections to identify where blocks were split. Where a TAZ split a block, he counted rooftops and used StreetView to estimate how many rooftops were in each TAZ. It is not desirable to maintain such a process--the reproducibility is limited and its highly manual.

We have decided to focus on **land area** as the method to allocate census populations to different TAZs.

### Useful references

-   massgis census: <https://www.mass.gov/info-details/massgis-data-2020-us-census>

## Set up Packages

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(tidycensus)
library(tigris)
library(mapview)
library(sf)
library(units)
library(rgeos)
library(sp)
library(mapview)
library(leafsync)
```

## Load Census and TAZ

```{r}
#| results: hide
 
#Load TAZ shapes
TAZ <- sf::read_sf("J:/Shared drives/Data_Requests/TAZ_Shapefiles/R_Script/out/geopackage/TAZ19.gpkg") %>% 
  st_transform(26986) %>% 
  filter(STATE %in% c("MA", "RI", "NH")) %>% # Filtering to only in MA, RI, and NH
  filter(TAZ_TYPE == "Internal_Centroid")
  
TAZ$TAZ_area <- st_area(TAZ)
  #filter(ID == 4398) # Filtering for one example

# OBtain the 2020 tracts from the tigris package.
# The CB false (the more detailed) geometry looked like it matched up better, so we move forward with that path.
tracts_MA <- tigris::tracts(state = "MA", 
                                cb = FALSE, 
                                year = 2020) %>% 
  st_transform(26986)

tracts_RI <- tigris::tracts(state = "RI", 
                                cb = FALSE, 
                                year = 2020) %>% 
  st_transform(26986)

tracts_NH <- tigris::tracts(state = "NH", 
                                cb = FALSE, 
                                year = 2020) %>% 
  st_transform(26986)

tracts <- bind_rows(tracts_MA, tracts_RI, tracts_NH) 
rm(tracts_MA, tracts_NH, tracts_RI)

# Clip the tracts to match the geometry of the TAZ file. This will eliminate coastal waters but retain inland waters. This is a useful starting place to have a similar coast line. This will also make our `erase_water` function work on a more similar set of water.
# Summarize() creates one shape for all of the TAZs.  When intersecting with the tracts, only the areas that intersect with the combined TAZ area remains. 

tracts_nocoast <- 
  st_intersection(tracts, TAZ |> summarize()) |> 
  st_collection_extract("POLYGON")

# Review the differences. It looks like what we'd expect. Coastal waters are not in the dataset anymore. 
# mapview(block_groups) + 
# mapview(block_groups_nocoast , col.regions = "orange")

# Overwrite the original file with the no_coast version and clean up the workspace.
tracts <- tracts_nocoast
rm(tracts_nocoast)

tracts <- tracts |> 
  group_by(GEOID, ALAND, AWATER) |> 
  summarize()

```

## Calculate Intersecting Areas

### Find Area of Census Tracts

We find the area of the census tracts. This area will not necessarily match areas reported by the census because of how the coastline is handled and how inland water is handled.

```{r}
tracts$TRACT_TOTAL_AREA <- (st_area(tracts)) 
```

### Intersect Census Tracts with TAZ

```{r}
intersections <- st_intersection(TAZ, tracts) %>%
  st_collection_extract("POLYGON") %>% 
  rowid_to_column("Intersection_ID") # unique ID for each intersection geometry

intersections$INTERSECTION_TOTAL_AREA <- st_area(intersections)

saveRDS(intersections, "./data/processed/tracts/intersect.rds")
#intersections <- read_rds("./data/processed/tracts/intersect.rds")
```

We now have the full area of the tracts and the area of the intersections.

### Erase Water From Intersections

We can now remove the water from the intersections. By doing this now, we only remove the water area once. We eliminate all of the water area.

```{r}
water <-
  area_water(
    state = "MA",
    year = 2020,
    county = fips_codes |> 
      filter(state == "MA") |> 
      select(county_code) |> pull()
  ) |> st_drop_geometry()

# Sort our water find the share of the area and the percentile of each body of water.
water <- water |> 
  arrange(desc(AWATER)) |> 
  mutate(share_of_area = cumsum(AWATER)/sum(AWATER),
         ntile = row_number()/n())

ggplot(water, aes(x= ntile, y = share_of_area)) + 
  geom_point() +
  scale_x_continuous(labels = scales::percent_format()) +
  scale_y_continuous(labels = scales::percent_format()) +
  coord_cartesian(xlim = c(0,0.25))
```

```{r}
intersections_land <- tigris::erase_water(intersections, 
                                area_threshold = 0.5, 
                                year = 2020)

saveRDS(intersections_land, "./data/processed/tracts/intersections_land_full.rds")

intersections_land <- read_rds("./data/processed/tracts/intersections_land_full.rds")

```

### Recalculate Land Area for the Intersections

We can now recalculate the area to obtain the land area by intersection.

```{r}
intersections_land$INTERSECTION_LAND_AREA <- st_area(intersections_land)
```

### Find Total Land Area for Census Tracts

```{r}
intersections_land <- intersections_land %>% 
  group_by(GEOID) %>% #grouping by tract
  mutate(TRACT_LAND_AREA = sum(INTERSECTION_LAND_AREA))
```

For each intersection area we now have the land area and the full area of the tract and the land area of the tract.

### Rejoin to initial intersection dataset

Bring the full dataset back together. We need to join back to the original intersection to maintain all of the "full area". Some of the areas disappear after water is removed. Without these the areas are not fully accounted for.

```{r}
intersections_for_alloc <- intersections |>
  st_drop_geometry() |>
  select(Intersection_ID, ID, GEOID, 
         INTERSECTION_TOTAL_AREA, TRACT_TOTAL_AREA) |>
  left_join(
    intersections_land |> 
      st_drop_geometry() |> 
      select(Intersection_ID, ID, GEOID, 
             INTERSECTION_LAND_AREA, TRACT_LAND_AREA),
    by = c("Intersection_ID", "ID", "GEOID")) 
```

## Allocate Tracts to TAZs

### Allocate based on Area

This calculated the relationship between tracts and TAZs based on land area (LA) and full area (FA). The full area method does have coastal waters stripped away.

```{r}
area_allocation <- intersections_for_alloc |> 
  group_by(GEOID) |> 
    mutate(TRACT_LA_pct = 
             drop_units(INTERSECTION_LAND_AREA / TRACT_LAND_AREA)) |> 
  select(Intersection_ID, ID, GEOID, 
         TRACT_LA_pct)

area_allocation <- area_allocation |> 
  group_by(GEOID, ID) |> 
  summarize(TRACT_LA_pct = sum(TRACT_LA_pct, na.rm = TRUE)) |> 
  filter(ID %in% TAZ$ID)

write_csv(area_allocation, "./output/data/tracts/area_allocation_fullregion.csv")
```

#### Check Results

We want to verify that we have maintained area. We want 100% of the area accounted for. This may be not as true now that we've included extra buffer area. We may want 100% of the area included for the TAZs inside the MPO boundary.

```{r}
flag <- area_allocation |> 
  group_by(GEOID) |> 
  summarize(tot_LA_in_tract = sum(TRACT_LA_pct, na.rm = TRUE)) |>
  ungroup() |> 
  filter(tot_LA_in_tract < 0.999)
```

There are two land_area values that are equal to `0`, rather than `1`. These are: 25009990100 and 25025990101. Neither of these have any land area at all--they are water-only tracts. At a glance, the remaining appear to be associated with the border or otherwise excluding some piece of geometry outside the MPO.

##### Explore Areas

```{r}
example <- intersections %>% 
  filter(GEOID %in% flag$GEOID)
  # filter(GEOID == "250277612002")

mapview(TAZ |> 
          filter(ID %in% example$ID), 
        col.regions = "red", 
        layer.name = "TAZ") + 
  mapview(tracts |> 
            filter(GEOID %in% example$GEOID),
          alpha.regions = 0.01, lwd = 3,
          layer.name = "tracts") + 
  mapview(example, zcol = "Intersection_ID",
          layer.name = "Intersection") + 
  mapview(TAZ |> st_union())
```

## Finding TAZ Results

```{r}
area <- read_csv("./output/data/tracts/area_allocation_BosMPO.csv",
                 show_col_types = FALSE)

allocation_results <- area %>%
  filter(ID %in% TAZ$ID)

write_csv(allocation_results, "./output/data/tracts/allocation_results_BosMPO.csv")

# Import the census tract info for MA. 

# P2_005N: Non-Hispanic/Latino, White-alone.
# P1_001N: Total Population.
# minority_tidy <- tidycensus::get_decennial(
#   geography = "tract",
#   state = "MA",
#   variable = "P2_005N",
#   summary_var = "P1_001N",
#   year = 2020) |> 
#   select(GEOID, nonmin_pop = value, tot_pop = summary_value) |> 
#   mutate(GEOID = as.numeric(GEOID)) |>
#   mutate(min_pop = tot_pop- nonmin_pop) |>
#   select(-nonmin_pop)

#B03002_003 | Estimate!!Total:!!Not Hispanic or Latino:!!White alone
#B03002_001 | Estimate!!Total: HISPANIC OR LATINO ORIGIN BY RACE

minority_acs_tidy <- get_acs(geography = "tract",
                       variable = "B03002_003", 
                       summary_var = "B03002_001", 
                       state= c("MA"), # prep for adding states
                       year= 2021)  %>% 
  rename(nonmin_pop = estimate, tot_pop = summary_est, 
         nonmin_moe = moe, tot_moe = summary_moe ) %>% 
  select(-variable) %>% 
  mutate(GEOID = as.numeric(GEOID))

# Join the population to the tracts.
# Find the minority percentages and their moes for each TAZ.
# 
# Note: Many of these steps could be done in any order because of how multiplication works.
# 
TAZ_results <- allocation_results |> 
  left_join(minority_acs_tidy, by = "GEOID") %>% 
  # Find the bounds of the margins of error for each metric (90% CI).
  mutate(nonmin_minval = nonmin_pop - nonmin_moe,
         nonmin_maxval = nonmin_pop + nonmin_moe) %>% 
  mutate(tot_minval = tot_pop - tot_moe, 
         tot_maxval = tot_pop + tot_moe) %>% 
  # Floor the values at 0. This is supported in the census docs:
  # https://www.census.gov/content/dam/Census/library/publications/2018/acs/acs_general_handbook_2018_ch07.pdf
  rowwise() |> 
  mutate(across(nonmin_minval:tot_maxval, ~ max(.,0))) |> 
  
  # multiply area allocation percentages by estimates and moes
  mutate(nonmin_alloc = TRACT_LA_pct * nonmin_pop, 
         nonmin_minval_alloc = TRACT_LA_pct * nonmin_minval,
         nonmin_maxval_alloc = TRACT_LA_pct * nonmin_maxval) %>% 
  
  mutate(tot_alloc = TRACT_LA_pct * tot_pop,
         tot_minval_alloc = TRACT_LA_pct * tot_minval,
         tot_maxval_alloc = TRACT_LA_pct * tot_maxval) %>% 
  mutate(nonmin_moe_alloc = TRACT_LA_pct * nonmin_moe,
         tot_moe_alloc = TRACT_LA_pct * tot_moe)


  # sum up estimates and moes for each TAZ
TAZ_results_summ <- TAZ_results %>% 
  group_by(ID) %>% 
  # allocation method
  summarize(TAZ_nonmin =        sum(nonmin_alloc, na.rm=TRUE),
            TAZ_nonmin_minval = sum(nonmin_minval_alloc, na.rm = TRUE), 
            TAZ_nonmin_maxval = sum(nonmin_maxval_alloc, na.rm = TRUE), 
            
            TAZ_tot =        sum(tot_alloc, na.rm=TRUE),
            TAZ_tot_minval = sum(tot_minval_alloc, na.rm=TRUE),
            TAZ_tot_maxval = sum(tot_maxval_alloc, na.rm=TRUE),
            
            TAZ_nonmin_moe = moe_sum(nonmin_moe_alloc, estimate = nonmin_alloc),
            TAZ_tot_moe =    moe_sum(tot_moe_alloc, estimate = tot_alloc)) %>% 
  
  select(ID, 
         TAZ_nonmin_minval, TAZ_nonmin_maxval,
         TAZ_tot_minval, TAZ_tot_maxval,
         TAZ_nonmin, TAZ_nonmin_moe,
         TAZ_tot, TAZ_tot_moe) %>% 
  
  mutate(nonmin_pct = TAZ_nonmin / TAZ_tot, 
         min_pct = 1 - nonmin_pct) %>%
  select(-nonmin_pct) %>% 
  # This relies on the MOE of a P being equal to the moe of (1-P).
  mutate(min_pct_moe = moe_prop(num = TAZ_nonmin, denom = TAZ_tot, 
                               moe_num = TAZ_nonmin_moe, moe_denom = TAZ_tot_moe))  %>% 
  
  
  # Boundaries Method: Uses the high-end estimates for both nonmin and tot to find
  # the nonmin pcts, then subtracts them from 1 to find the counterparts.
  mutate(min_pct_lowend  = (1- TAZ_nonmin_maxval / TAZ_tot_maxval),
         min_pct_highend = (1- TAZ_nonmin_minval / TAZ_tot_minval),
         min_pct_midpt = (min_pct_lowend + min_pct_highend) / 2,
         min_pct_altmoe = min_pct_highend - min_pct_midpt) |> 
    
    # min value method
  mutate(nonmin_maxval_pct = TAZ_nonmin_maxval / TAZ_tot,
         min_minval_pct = 1 - nonmin_maxval_pct ) %>%
  select(-nonmin_maxval_pct) %>%
  mutate(minpct_moe_submethod = min_pct - min_minval_pct) |> 
  mutate(combined_moe_pct = paste0(scales::percent(min_pct, 0.1), 
                                   " ± ", 
                                   scales::percent(min_pct_moe, 0.1)))

```

### Testing Areal-weighted Interpolation of Polygon Data

```{r}

# tracts$GEOID <- as.numeric(tracts$GEOID)
# 
# tracts_w_min <- tracts %>% left_join(minority_tidy)
# 
# tracts_land <- tigris::erase_water(tracts_w_min, 
#                                 area_threshold = 0, 
#                                 year = 2020)
# 
# TAZ_land <- tigris::erase_water(TAZ, 
#                                 area_threshold = 0, 
#                                 year = 2020)
# 
# new_method <- st_interpolate_aw(tracts_land, TAZ_land, extensive = TRUE)
# 
# mapview(new_method, zcol = "min_pop") 
# mapview(TAZ_map, zcol = "LA_min")
```

### Testing

Check that we have retained all of our GEOID area. These values should add up to 100% or 1.0. The areas that do not are very small and may be solved when the script is scaled to include a larger area instead of a single county.

```{r}

flags <- allocation_results |> 
  filter(ID %in% TAZ$ID) |>
  group_by(GEOID) |> 
  summarize(tot_LA_in_tract = sum(TRACT_LA_pct, na.rm = TRUE)) |>
  ungroup() |> 
  filter(tot_LA_in_tract < 0.999 )

mapview(tracts |> filter(GEOID %in% flags$GEOID)) +
  mapview(TAZ |> st_union(), col.regions = "green") 

```

### Compare Population Estimates

```{r}
#| warning: false
#| message: false
library(GGally)

min_results <- TAZ_results %>% 
  select(LA_min)

tot_results <- TAZ_results %>% 
  select(LA_tot)

percentages_ID <- TAZ_results %>% 
  mutate(LA_pct_min = 100 * LA_min / LA_tot) %>% 
  select(ID, LA_pct_min)

percentages <- percentages_ID %>% 
  select(-ID)



```

## Map Comparison

```{r}

TAZ_map <- TAZ %>% 
  left_join(percentages_ID) %>% 
  left_join(TAZ_results)


tract_map <- tracts %>% 
  mutate(GEOID = as.numeric(GEOID)) %>% 
  left_join(minority_tidy) %>% 
  mutate(pct_min = 100 * min_pop / tot_pop)



# Minority Percent
mpct_LA <- mapview(TAZ_map, zcol = "LA_pct_min", at = seq(0,100,20), lwd = 0, legend = TRUE)
mpct_tract <- mapview(tract_map, zcol = "pct_min", at = seq(0,100,20),lwd = 0, legend = FALSE)

sync(mpct_LA, mpct_tract) # 2 panels synchronised

```

## Trailing Thoughts

### Thoughts:

Some TAZs are smaller than census block groups. Do we need to adjust the method of analysis for those cases? It could be the same. Since we are looking for the percentage of the block group that is within the TAZ, then it wouldn't matter if it is smaller or larger. In this case, it just wouldn't also be sharing area with other block groups.

![](images/image-779890944.png)
